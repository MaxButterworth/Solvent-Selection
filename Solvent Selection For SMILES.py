import pandas as pdimport numpy as npfrom rdkit import Chemfrom rdkit import DataStructsfrom ord_schema import message_helpersfrom ord_schema.proto import dataset_pb2# Opening the reaction databasedata = message_helpers.load_message('ord_dataset-00005539a1e04c809a9a78647bea649c.pb.gz', dataset_pb2.Dataset)df = message_helpers.messages_to_dataframe(data.reactions, drop_constant_columns=True) # Assigning data to a Pandas dataframe, df"""# Defining category arrays (see splicing a Pandas Data frame)reactants = df.iloc[:, ]solvents = df.iloc[]smiles = df.iloc[]ms = [] # Defining the molecular SMILES listfps = [] # Defining the fingerprints listsim_scores = [] # Defining a similarity scores list  # Defining a function to search the reactiondef Solvent_Selection(reactant1, reactant2, product1, product2):        # Setting up arrays    search_ms = [0,0,0,0] # Mol from SMILES array    search_fps = [] # Array for fingerprints to compare to database reaction fingerprints        similarity_scores = [] # Array to append similarity scores        # Setting up the fingerprints for input SMILES    search_ms[0] = Chem.rdmolfiles.MolFromSmiles(reactant1)    search_ms[1] = Chem.rdmolfiles.MolFromSmiles(reactant2)    search_ms[2] = Chem.rdmolfiles.MolFromSmiles(product1)    search_ms[3] = Chem.rdmolfiles.MolFromSmiles(product2)        for i in range(0,4):        search_fps.append(Chem.RDKFingerprint(search_ms[i]))            # Iterating over the dataset to compare similarity between dataset reactions and input SMILES    for j in range(0,len(reactants)):                sim_r1 = DataStructs.FingerprintSimilarity(search_fps[0], reactants1_fps[j])        sim_r2 = DataStructs.FingerprintSimilarity(search_fps[1], reactants2_fps[j])        sim_p1 = DataStructs.FingerprintSimilarity(search_fps[2], products1_fps[j])        sim_p2 = DataStructs.FingerprintSimilarity(search_fps[3], products2_fps[j])                similarity_scores[j] = sim_r1*sim_r2*sim_p1*sim_p2        # Determining similarity scores    for j in range(0, len(fps)):        sim_scores.append(DataStructs.FingerprintSimilarity(mol2fing, fps[j]))        # Return the highest similarity score and the corresponding reaction SMILES    return np.max(sim_scores), smiles[np.argmax(np.max(sim_scores))]simscore, simreaction = reaction_search()print(simscore)print(simreaction)"""